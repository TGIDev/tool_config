
" VIM DEFAULT VIMRC CONFIG
" -----------------------------------------"
"
" An example for a vimrc file.
"
" Maintainer:	Bram Moolenaar <Bram@vim.org>
" Last change:	2019 Dec 17
"
" To use it, copy it to
"	       for Unix:  ~/.vimrc
"	      for Amiga:  s:.vimrc
"	 for MS-Windows:  $VIM\_vimrc
"	      for Haiku:  ~/config/settings/vim/vimrc
"	    for OpenVMS:  sys$login:.vimrc

" When started as "evim", evim.vim will already have done these settings, bail
" out.
if v:progname =~? "evim"
  finish
endif

" Get the defaults that most users want.
"source $VIMRUNTIME/defaults.vim

if has("vms")
  set nobackup		" do not keep a backup file, use versions instead
else
  set backup		" keep a backup file (restore to previous version)
  if has('persistent_undo')
    set undofile	" keep an undo file (undo changes after closing)
  endif
endif

if &t_Co > 2 || has("gui_running")
  " Switch on highlighting the last used search pattern.
  set hlsearch
endif

" Put these in an autocmd group, so that we can delete them easily.
augroup vimrcEx
  au!

  " For all text files set 'textwidth' to 78 characters.
  autocmd FileType text setlocal textwidth=78
augroup END

" Add optional packages.
"
" The matchit plugin makes the % command work better, but it is not backwards
" compatible.
" The ! means the package won't be loaded right away but when plugins are
" loaded during initialization.
"if has('syntax') && has('eval')
  "packadd! matchit
"endif


" -----------------------------------------"
" USER ADDED CONFIG
" -----------------------------------------"

"STARTING
set autochdir

call plug#begin()

    Plug 'https://github.com/vim-airline/vim-airline'			" Status bar
    Plug 'https://github.com/vim-airline/vim-airline-themes'		" airline theme
    Plug 'https://github.com/preservim/nerdtree'				" NerdTree
    Plug 'https://github.com/joshdick/onedark.vim' 				" colortheme


    Plug 'prabirshrestha/vim-lsp'               " LSP CLIENT
    Plug 'mattn/vim-lsp-settings'               " LSP manager
    Plug 'prabirshrestha/asyncomplete.vim'      " Asyncronous machine
    Plug 'prabirshrestha/asyncomplete-lsp.vim'  " linker for LSP
call plug#end()


"------------------------------------------------------------"
" SET colors
"------------------------------------------------------------"
if has("gui_running")
  set background=dark
  colorscheme onehalfdark
else
    if has("macunix")
      set background=dark
      colorscheme onedark
  else
      set background=dark
      colorscheme onedark
  endif
endif
"------------------------------------------------------------"
"  SETs -----------------------------------------------------"
"------------------------------------------------------------"

set nocompatible    " Set 'nocompatible' to ward off unexpected things that your distro might
set cul             " highlight current line
set cc=+1           " put a ruler on max line width
set number          " set numbering lines
set hidden          " keeps every buffer inside even if not saved
set noerrorbells    " not ring the bell for error messages
set smartcase       " do a capital search only if capitals on the search
set incsearch       " will start highlight the current search word if present on the page
set scrolloff=8     " start scrolling the page 8line before bottom
set signcolumn=yes  " add side column for every error/pluggin messages
let mapleader =","  " map leader to comma
set splitright      " will split only on the right hand side when calling a vsplit
set splitbelow      " will split bellow when calling an horizontal split
set tw=80           " set the wrap column number to 80
set nowrap          " will not wrap text after 80 lines
set relativenumber  " set the relative number for curent line
set belloff=all     " remove all bell sounds
set path+=**        " will automatically add subfolder for :find command
set wildmenu        " Display command lineâ€™s tab complete options as a menu
set lazyredraw      " don't update screen for every macro occurence
set ignorecase
set smartcase
set encoding=utf-8
set foldmethod=indent   "Fold based on indention levels.
set foldnestmax=3       "Only fold up to three nested levels.
set nofoldenable        "Disable folding by default.
set tabstop     =4
set softtabstop =4
set shiftwidth  =4
set expandtab
set smartindent

"SHELL config : change default shell for gitbash on windows (Require gitbash)
if has("win32")
  set shell=sh
endif

"------------------------------------------------------------"
"  CONFIG FOR FILES
"------------------------------------------------------------"
" Attempt to determine the type of a file based on its name and possibly its
" contents. Use this to allow intelligent auto-indenting for each filetype,
" and for plugins that are filetype specific.
filetype indent plugin on
filetype on
" Enable syntax highlighting
syntax on

"------------------------------------------------------------"
"  SNIPPETS PART
" User snipet definition
" note : path to be updated depending on os
"------------------------------------------------------------"
"
" "-------------    VHDL SNIPETS ------------------------------"
" if has("win32")
"   nnoremap ;proc :-1read $HOME/vimfiles/templates/.skeleton_vhdl_process.vhd<CR>ea
" else
"   nnoremap ;proc :-1read $HOME/.vim/templates/.skeleton_vhdl_process.vhd<CR>ea
" endif
" "-------------    VHDL SNIPETS ------------------------------"
" " will be called when creating the file :
" autocmd BufNewFile *.py 0r ~/vimfiles/templates/skeleton.py

"------------------------------------------------------------"
"  MAPPINGS
"------------------------------------------------------------"
"
"-------------   NORMAL MODE MAPPINGS -----------------------"
"
" CTRL+H will clear highlight on words
nnoremap <C-H> :nohl<CR>
" replace <C-F> by SPACE key to move pages
noremap <SPACE> <C-F>
"Mapping for window navigation
nnoremap <M-j> <C-w>j
nnoremap <M-k> <C-w>k
nnoremap <M-m> <C-w>m
nnoremap <M-l> <C-w>l
"MAP tab movement
nnoremap <Leader>n :tabnext<CR>
nnoremap <Leader>b :tabprevious<CR>
nnoremap <Leader>t :tabnew<CR>
"Map buffer deletion clean
nnoremap <Leader>d :bn \| bd#<CR>
"Clean endline spaces
nnoremap <Leader>ds :%s/\s\+$//e<CR>:nohl<CR>
" paste from clipboard
nnoremap <Leader>p "*p
"-------------   VISUAL MODE MAPPINGS -----------------------"
"
vnoremap <Leader>y "*y
vnoremap <Leader>yy "*yy
""BLOC movement
" Allow bloc indent
vnoremap < <gv
vnoremap > >gv
vnoremap * 0
"block comment
vnoremap <Leader>c :norm I
"block uncomment
" /!\ This won't work if there is no space at the begining of the line
vnoremap <Leader>cu :norm 0wdw0x<CR>

"-------------   COMMAND MAPPINGS -----------------------"
"map command for vertical terminal
cnoremap vt vert term ++kill="kill" ++cols=80


"------------------------------------------------------------"
"GUI OPTIONS FOR GVIM
"------------------------------------------------------------"
if !has("gui_macvim")
   set go-=T "remove the toolbar
   set go-=m "remove the menu bar
   set go-=R "remove the right hand side scroll bar
   set go-=r "remove the right hand side scroll bar
   set go-=b "remove the horizontal scroll bar
   set guifont=Lucida_Console:h9:cANSI:qDRAFT
endif
if has("gui_running")
  "GVIM FULLSCREEN
  map <F11> <Esc>:call libcallnr("gvimfullscreen.dll", "ToggleFullScreen", 0)<CR>
endif

"Enable help pages
silent! helptags ALL
"------------------------------------------------------------"
" VIM'S TEMPFILES OPTIONS
"------------------------------------------------------------"
"-------------------------------------------------------------"
"Set backup and swap file directory
"CAUTION : THIS HAVE TO BE ADAPTED TO THE SYTEM TYPE
"-------------------------------------------------------------"
if has("win32")
  set backup
  " the // at the end means to use path in file name like
  " Users%tgiol%tmp%myfile.txt.swp
  set backupdir=C:\\Temp//
  set dir=C:\\Temp//
  set undodir=C:\\Temp//
else
  set backup
  " tell vim where to put its backup files
  set backupdir=~/vimbackupdir/
  " tell vim where to put swap files
  set dir=~/vimbackupdir/
  set undodir=~/vimbackupdir/
endif

"------------------------------------------------------------"
" PLUGINGS PART
"------------------------------------------------------------"
"------------------------------------------------------------"
"Nerdtree settings
"------------------------------------------------------------"
nnoremap <leader>n :NERDTreeFocus<CR>
nnoremap <C-n> :NERDTree<CR>
nnoremap <C-t> :NERDTreeToggle<CR>
nnoremap <C-f> :NERDTreeFind<CR>
" Open the existing NERDTree on each new tab.
if !exists('g:vscode')
	autocmd BufWinEnter * if getcmdwintype() == '' | silent NERDTreeMirror | endif
endif

"------------------------------------------------------------"
"Airline settings
"------------------------------------------------------------"
let g:airline_theme='deus'
let g:airline_section_c_only_filename = 1

"------------------------------------------------------------"
"AsyncComplete
"------------------------------------------------------------"
inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
inoremap <expr> <cr>    pumvisible() ? asyncomplete#close_popup() : "\<cr>"
